stars %>% filter(!is.na(temp)) %>% ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_label_repel() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
library(ggplot2)
library(ggrepel)
library(ggthemes)
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>% ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_text_repel() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_text_repel() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_text_repel()
source("C:/Users/natsu/OneDrive - Shawnee State University/EdX-MASTER-CLEFABLE-3/Data Visualization/stars.R")
library(ggplot2)
library(ggrepel)
library(ggthemes)
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_text_repel() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_label()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse() +
geom_text()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse() +
geom_label()
source("C:/Users/natsu/OneDrive - Shawnee State University/EdX-MASTER-CLEFABLE-3/Data Visualization/stars.R")
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse() +
geom_label_repel()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse() +
geom_label_repel()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_label_repel() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_label_repel() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
geom_label()
source("C:/Users/natsu/OneDrive - Shawnee State University/EdX-MASTER-CLEFABLE-3/Data Visualization/stars.R")
#Question 5
#For various reasons, scientists do not always follow straight conventions when making plots, and astronomers usually transform values of star luminosity and temperature before plotting. Flip the y-axis so that lower values of magnitude are at the top of the axis (recall that more luminous stars have lower magnitude) using scale_y_reverse(). Take the log base 10 of temperature and then also flip the x-axis.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, label = star)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse() +
geom_label()
head(stars)
#Question 9
#Remove the text labels and color the points by star type. This classification describes the properties of the star's spectrum, the amount of light produced at various wavelengths.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, color = type)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
#Question 9
#Remove the text labels and color the points by star type. This classification describes the properties of the star's spectrum, the amount of light produced at various wavelengths.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, color = type)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse()
scale_colour_manual(values = c("#000000", "#AAAAAA", "#0022BB", "#22BB00", "#CCCCCC", "#CC00CC", "#CCCC00","#56B4E9", "#009E73", "#F0E442")
geom_point() +
scale_x_reverse() +
#Question 9
#Remove the text labels and color the points by star type. This classification describes the properties of the star's spectrum, the amount of light produced at various wavelengths.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, color = type)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse() +
scale_colour_manual(values = c("#000000", "#AAAAAA", "#0022BB", "#22BB00", "#CCCCCC", "#CC00CC", "#CCCC00","#56B4E9", "#009E73", "#F0E442"))
#Question 9
#Remove the text labels and color the points by star type. This classification describes the properties of the star's spectrum, the amount of light produced at various wavelengths.
stars %>% filter(!is.na(temp)) %>%
ggplot(aes(temp, magnitude, color = type)) +
geom_point() +
scale_y_reverse() +
scale_x_continuous(trans = "log10") +
scale_x_reverse() +
scale_colour_manual(values = c("#000000", "#AAAAAA", "#0022BB", "#22BB00", "#CCCCCC", "#CC00CC", "#CCCC00","#56B4E9", "#009E73", "#F0E442"))
source("C:/Users/natsu/OneDrive - Shawnee State University/EdX-MASTER-CLEFABLE-3/Data Visualization/stars.R")
source("C:/Users/natsu/OneDrive - Shawnee State University/EdX-MASTER-CLEFABLE-3/Data Visualization/stars.R")
source("C:/Users/natsu/OneDrive - Shawnee State University/EdX-MASTER-CLEFABLE-3/Data Visualization/stars.R")
greenhouse_gases %>%
ggplot(aes(year,concentration)) +
geom_line() +
facet_grid(concentration ~ year, scales = "free") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
library(tidyverse)
library(dslabs)
library(dplyr)
library(ggplot2)
data(temp_carbon)
data(greenhouse_gases)
data(historic_co2)
#Question 8
head(greenhouse_gases)
greenhouse_gases %>%
ggplot(aes(year,concentration)) +
geom_line() +
facet_grid(concentration ~ year, scales = "free") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_point()
greenhouse_gases %>%
ggplot(aes(year,concentration)) +
geom_line() +
facet_grid(gas ~ year, scales = "free") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_point()
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_point() +
facet_grid(gas ~ year, scales = "free")
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_point() +
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_point() +
facet_grid(gas ~ concentration, scales = "free")
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_point()
greenhouse_gases %>%
ggplot(aes(year,concentration)) +
geom_line()
greenhouse_gases %>%
ggplot(aes(year,concentration)) +
geom_line() +
facet_grid(gas ~ year, scales = "free") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
greenhouse_gases %>%
ggplot(aes(year,concentration), group = gas) +
geom_line() +
facet_grid(gas ~ year, scales = "free") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
greenhouse_gases %>%
ggplot(aes(year,concentration)) +
geom_line() +
facet_grid(gas ~ concentration, scales = "free") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
greenhouse_gases %>%
ggplot(aes(year,concentration)) +
geom_line() +
facet_grid(. ~ gas, scales = "free") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
greenhouse_gases %>%
ggplot(aes(year,concentration)) +
geom_line() +
facet_grid(gas ~ ., scales = "free") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_line() +
facet_grid(gas ~ ., scales = "free") +
geom_vline(aes(xintercept = 1850))
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_line() +
facet_grid(gas ~ ., scales = "free") +
geom_vline(aes(xintercept = 1850), col = "blue")
greenhouse_gases %>%
ggplot(aes(year, concentration)) +
geom_line() +
facet_grid(gas ~ ., scales = "free") +
geom_vline(aes(xintercept = 1850), col = "blue") +
ylab("Concentration (ch4/n2o ppb, co2 ppm)") +
ggtitle("Atmospheric greenhouse gas concentration by year, 0-2000")
#Question 10
temp_carbon %>%
filter(!is.na(carbon_emissions)) %>%
ggplot(aes(year, carbon_emissions)) +
geom_line() +
geom_hline(aes(yintercept=0), col = "blue")
#Question 10
temp_carbon %>%
filter(!is.na(carbon_emissions)) %>%
ggplot(aes(year, carbon_emissions)) +
geom_line() +
geom_vline(aes(xintercept=1850), col = "blue")
temp_carbon$carbon_emissions
temp_carbon %>% filter(year %in% c(1960,2014)) %>%
.$carbon_emissions
9855/2569
temp_carbon %>% filter(year %in% c(1960,1970,2014)) %>%
.$carbon_emissions
9855/4053
temp_carbon %>%
ggplot(aes(year, carbon_emissions)) +
geom_line() +
ylab("Carbon emissions (metric tons)") +
ggtitle("Annual global carbon emissions, 1751-2014")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line()
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line() +
scale_x_continuous(trans = "log10")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line() +
scale_x_continuous(trans = "log2")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line() +
scale_x_continuous(trans = "loge")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line() +
scale_x_continuous(trans = "log100")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line() +
scale_x_continuous(trans = "log10")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line()
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line() +
scale_x_continuous(trans = "log10")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line() +
scale_x_continuous(trans = "log10") +
geom_hline(aes(yintercept=200), col = "blue")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, color = source)) +
geom_line() +
geom_hline(aes(yintercept=200), col = "blue")
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
xlim(c(-800,000, -775,000))
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
xlim(c(-800,000, -775,000))
#Question 11
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800,000, -775,000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800,000, -775,000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
#Question 12
historic_co2 %>%ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800,000, -775,000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800,000, -775,000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800,000, -775,000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800000, 2)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800000, -775000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800000, -775000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800000, -775000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
geom_hline(aes(yintercept=200), col = "blue") +
geom_hline(aes(yintercept=275), col = "blue")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-850000, -750000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
geom_hline(aes(yintercept=200), col = "blue") +
geom_hline(aes(yintercept=275), col = "blue")
00
00
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-800000, -775000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
geom_hline(aes(yintercept=200), col = "blue") +
geom_hline(aes(yintercept=275), col = "blue")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-375000, -330000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
geom_hline(aes(yintercept=200), col = "blue") +
geom_hline(aes(yintercept=275), col = "blue")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-375000, -330000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
geom_hline(aes(yintercept=180), col = "blue") +
geom_hline(aes(yintercept=300), col = "blue")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-140000, -120000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
geom_hline(aes(yintercept=180), col = "blue") +
geom_hline(aes(yintercept=300), col = "blue")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-140000, -120000)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
geom_hline(aes(yintercept=200), col = "blue") +
geom_hline(aes(yintercept=280), col = "blue")
#Question 12
historic_co2 %>%
ggplot(aes(year, co2, col = source)) +
geom_line() +
xlim(c(-300, 2018)) +
ggtitle("Atmospheric CO2 concentration, -800,000 BC to today") +
ylab("co2 (ppmv)") +
geom_hline(aes(yintercept=275), col = "blue") +
geom_hline(aes(yintercept=400), col = "blue")
